import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { fetchCount } from './sudokuAPI';

export interface CounterState {
  board: string[][];
  status: 'idle' | 'loading' | 'failed';
}

const initialState: CounterState = {
  board: [],
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  'solve/solveAsync',
  async (amount: number) => {
    const response = await fetchCount(amount);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const sudokuSlice = createSlice({
  name: 'sudoku',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    solve: (state) => {
    },
    setValueAt: (state, action: PayloadAction<{i:number, j:number, value: string}>) => {

    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        // state.board += action.payload;
      })
      .addCase(incrementAsync.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

export const { solve } = sudokuSlice.actions;

export const selectBoard = (state: RootState) => state.sudoku.board;

export default sudokuSlice.reducer;
